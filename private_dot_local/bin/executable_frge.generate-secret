#!/usr/bin/env bash

source "${BASH_SOURCE%/*}/lib/log.sh"

# Creates a new secrets.yml file in the current directory, attempting to find config.yml files in the hierarchy to determine the AWS Account ID/Alias

if [[ ! -f terragrunt.hcl ]]; then
	log::err "not in a deployment directory (no terragrunt.hcl). Refusing to create a secrets file."
  exit 1
fi

if [[ -f ./secrets.yml ]]; then
  log::err "secrets.yml file already exists in this directory. Refusing to clobber it."
  exit 1
fi

aws_account_id=
aws_account_alias=
aws_account_config_file=
pwd_save=$(pwd)

while [[ -z $aws_account_id ]]; do
  if [[ -f ./config.yml ]]; then
    _id=$(yq -er '.aws_account_id' ./config.yml)
    _id_rc=$?
    _alias=$(yq -er '.aws_account_alias' ./config.yml)
    _alias_rc=$?

    if [[ $_id_rc -eq 0 && $_alias_rc -eq 0 && $_id != 'null' && $_alias != 'null' ]]; then
      aws_account_id=${_id}
      aws_account_alias=${_alias}
      aws_account_config_file=$(realpath ./config.yml)
      break
    fi
  fi

  if [[ -f ./root.hcl ]]; then
    log::err "Reached the root of this infra monorepo without finding an aws account ID."
    exit 1
  elif [[ $(pwd) == "/" ]]; then
    log::err "Reached the root of the filesystem without finding a config.yml or a root.hcl."
    exit 1
  else
    cd ../
    continue
  fi
done

cd ${pwd_save}

if [[ ! $aws_account_id =~ [0-9][0-9]* ]]; then
  log::err "invalid AWS Account ID detected: ${aws_account_id}\nFrom file: ${aws_account_config_file}"
  exit 1
fi

if [[ ! ${aws_account_alias} =~ [a-z0-9][a-z0-9-]* ]]; then
  log::err "invalid AWS Account alias detected: ${aws_account_alias}\nFrom file: ${aws_account_config_file}"
  exit 1
fi

log::info "Detected AWS Account ${aws_account_id} (${aws_account_alias}) from config file: ${aws_account_config_file}"

username=${USER/\-dev/}

log::info "Detected username: ${username}"

log::info "Attempting to assume DeveloperNonProd and DeveloperFull roles in this account."

# TODO: rely on return code to determine success following update to aacli
output="$(aacli add -u ${username} -a ${aws_account_id} -r DeveloperNonProd 2>&1)"
if [[ $output == "User ${username} does not have DeveloperNonProd"* ]]; then
	developernonprod_rc=1
else
	developernonprod_rc=0
fi
# TODO: rely on return code to determine success following update to aacli
output="$(aacli add -u ${username}-adm -a ${aws_account_id} -r DeveloperFull 2>&1)"
if [[ $output == "User ${username}-adm does not have DeveloperFull"* ]]; then
	developerfull_rc=1
else
	developerfull_rc=0
fi

first_role=
second_role=
if [[ $developernonprod_rc -eq 0 && $developerfull_rc -eq 0 ]]; then
  log::info "Will add ${aws_account_alias}-DeveloperNonProd and ${aws_account_alias}-DeveloperFull KMS decryption access to the secrets file"
  first_role="DeveloperFull"
  second_role="DeveloperNonProd"
elif [[ $developerfull_rc -eq 0 ]]; then
  log::info "Will add ${aws_account_alias}-DeveloperFull KMS decryption access to the secrets file"
  first_role="DeveloperFull"
elif [[ $developernonprod_rc -eq 0 ]]; then
  log::info "Will add ${aws_account_alias}-DeveloperNonProd KMS decryption access to the secrets file"
  first_role="DeveloperNonProd"
else
  log::err "unable to assume either DeveloperNonProd or DeveloperFull roles for this account; are you sure you have access?"
  exit 1
fi

# Check for managed-usea1-secrets alias
looked_up_alias_arn=$(AWS_PROFILE=${aws_account_alias}-${first_role} aws kms list-aliases | jq -r '.Aliases[] | select(.AliasName=="alias/managed-usea1-secrets") | .AliasArn')
if [[ ! $looked_up_alias_arn =~ alias\/managed-usea1-secrets$ ]]; then
  log::err "unable to find a KMS key alias called alias/managed-usea1-secrets in ${aws_account_alias} using ${first_role} role."
  exit 1
fi

log::info "Creating a new secrets file with the ${first_role} role. (throwaway contents)"
echo "test: replace-me" > secrets.yml
echo "sops --aws-profile ${aws_account_alias}-${first_role} --kms ${looked_up_alias_arn} -e --in-place secrets.yml"
sops --aws-profile ${aws_account_alias}-${first_role} --kms ${looked_up_alias_arn} -e --in-place secrets.yml

if [[ $? -ne 0 ]]; then
  log::err "creating secrets.yml with ${first_role} role failed."
  exit 1
fi

if [[ ! -z $second_role ]]; then
  log::info "\nAdding the ${second_role} role to the secrets file."
  echo "sops --aws-profile ${aws_account_alias}-${second_role} --add-kms ${looked_up_alias_arn} --rotate --in-place secrets.yml"
  sops --aws-profile ${aws_account_alias}-${second_role} --add-kms ${looked_up_alias_arn} --rotate --in-place secrets.yml

  if [[ $? -ne 0 ]]; then
    log::err "creating secrets.yml with ${second_role} role failed."
    exit 1
  fi
fi

log::success "Successfully created secrets file: secrets.yml"
log::success "You can now open an editor to modify the decrypted contents with:\n\n\tsops secrets.yml"
